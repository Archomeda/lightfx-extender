; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "LightFX Extender"
#define MyAppVersion "0.5.0-dev"
#define MyAppURL "https://github.com/Archomeda/lightfx-extender"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{11F3DB08-693B-40B9-B501-CE0920176D69}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir=../artifacts
OutputBaseFilename={#MyAppName} v{#MyAppVersion} Setup
UninstallDisplayName={#MyAppName}
Compression=lzma/Max
SolidCompression=yes
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "../artifacts/work/bin/LFXE.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "../artifacts/work/bin/LFXE.x64.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "../artifacts/work/bin/CUESDK_2013.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "../artifacts/work/bin/CUESDK.x64_2013.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "../artifacts/work/x86/LightFX.dll"; DestDir: "{app}/x86"; Flags: ignoreversion
Source: "../artifacts/work/x64/LightFX.dll"; DestDir: "{app}/x64"; Flags: ignoreversion
Source: "../artifacts/work/x86/LightFX.dll"; DestDir: {code:GameDir}; Check: Game32Check; Flags: ignoreversion
Source: "../artifacts/work/x64/LightFX.dll"; DestDir: {code:GameDir}; Check: Game64Check; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKLM; Subkey: "SOFTWARE\LightFX Extender"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "SOFTWARE\LightFX Extender"; Flags: uninsdeletekey; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"

[UninstallDelete]
Type: files; Name: "{app}\LFXE.dll.bak"
Type: files; Name: "{app}\LFXE.x64.dll.bak"
Type: files; Name: "{app}\CUESDK_2013.dll.bak"
Type: files; Name: "{app}\CUESDK.x64_2013.dll.bak"
Type: files; Name: "{app}\x86\LightFX.dll.bak"
Type: files; Name: "{app}\x64\LightFX.dll.bak"

[Messages]
english.WelcomeLabel2=This will install [name/ver] on your computer.%n%nIf you have LightFX Extender installed and are updating, please close all other applications that might use it before continuing.
english.SelectDirLabel3=Setup will install [name] into the following folder.%nNOTE: This should not be a game folder! That option will come later.

[CustomMessages]
Yes=Yes
No=No
SelectGameTitle=Your first game with {#MyAppName}
SelectGameDesc={#MyAppName} doesn't really do much without a game that supports LightFX. If you want, you can select a game here.
SelectGameEnableLabel=Install {#MyAppName} for a game
SelectGameBrowseLabel=Click Browse to select the folder where the game is located.
SelectGamePlatformLabel=Is the game 32-bit or 64-bit?
SelectGamePlatform32Label=32-bit (x86)
SelectGamePlatform64Label=64-bit (x64)
SelectGamePlatformValidationError=You have to select whether the game is 32-bit or 64-bit.
SelectGameExtraInfoLabel=This will install LightFX.dll into the game folder. You can always install {#MyAppName} into another game folder later. For this, you simply have to copy the LightFX.dll that's located in either the x86 or x64 folder inside the {#MyAppName} installation folder.
ReadyMemoInstallForGameEnable=Install {#MyAppName} for a game:
ReadyMemoInstallForGameDirDesc=Game destination location:
ReadyMemoInstallForGamePlatformDesc=Game platform:
RemoveAppDataFolderMsgBox=Would you like to remove your {#MyAppName} settings and logs?

[Code]
var
    WizardFormNextButtonOnClickEventOriginal: TNotifyEvent;
    GamePage: TInputDirWizardPage;
    GamePageEnableCheckBox: TNewCheckBox;
    GamePagePlatformText: TNewStaticText;
    GamePagePlatformCheckListBox: TNewCheckListBox;
    GamePageExtraInfoText: TNewStaticText;

procedure WizardFormNextButtonOnClickEvent(Sender: TObject);
var
    IsDirEmpty: Boolean;
begin
    if (WizardForm.CurPageID = GamePage.ID) and (GamePageEnableCheckBox.Checked = False) and (GamePage.Values[0] = '') then
    begin
        IsDirEmpty := True;
        GamePage.Values[0] := ExpandConstant('{app}');
    end;
    WizardFormNextButtonOnClickEventOriginal(Sender);
    if IsDirEmpty then
        GamePage.Values[0] := '';
end;

procedure GamePageEnableCheckBoxClickEvent(Sender : TObject);
begin
    GamePage.SubCaptionLabel.Enabled := GamePageEnableCheckBox.Checked;
    GamePage.Buttons[0].Enabled := GamePageEnableCheckBox.Checked;
    GamePage.Edits[0].Enabled := GamePageEnableCheckBox.Checked;
    GamePagePlatformText.Enabled := GamePageEnableCheckBox.Checked;
    GamePagePlatformCheckListBox.Enabled := GamePageEnableCheckBox.Checked;
end;

procedure InitializeWizard;
begin
    GamePage := CreateInputDirPage(wpSelectDir,
        CustomMessage('SelectGameTitle'),
        CustomMessage('SelectGameDesc'),
        CustomMessage('SelectGameBrowseLabel'),
        False, '');
    GamePage.Add('');
    GamePage.Values[0] := GetPreviousData('GameDir', '');

    GamePageEnableCheckBox := TNewCheckBox.Create(GamePage);
    GamePageEnableCheckBox.Width := GamePage.SurfaceWidth div 2;
    GamePageEnableCheckBox.Height := ScaleY(17);
    GamePageEnableCheckBox.Caption := CustomMessage('SelectGameEnableLabel');
    GamePageEnableCheckBox.Parent := GamePage.Surface;
    GamePageEnableCheckBox.Checked := GetPreviousData('GameEnable', '0') = '1';
    GamePageEnableCheckBox.OnClick := @GamePageEnableCheckBoxClickEvent;

    GamePage.SubCaptionLabel.Top := GamePage.SubCaptionLabel.Top + GamePageEnableCheckBox.Height + ScaleY(12);
    GamePage.SubCaptionLabel.Enabled := GamePageEnableCheckBox.Checked;
    GamePage.Buttons[0].Top := GamePage.Buttons[0].Top + GamePageEnableCheckBox.Height + ScaleY(12);
    GamePage.Buttons[0].Enabled := GamePageEnableCheckBox.Checked;
    GamePage.Edits[0].Top := GamePage.Edits[0].Top + GamePageEnableCheckBox.Height + ScaleY(12);
    GamePage.Edits[0].Enabled := GamePageEnableCheckBox.Checked;

    GamePagePlatformText := TNewStaticText.Create(GamePage);
    GamePagePlatformText.Enabled := GamePageEnableCheckBox.Checked;
    GamePagePlatformText.Top := GamePage.Edits[0].Top + GamePage.Edits[0].Height + ScaleY(12);
    GamePagePlatformText.Width := GamePage.SurfaceWidth;
    GamePagePlatformText.Height := ScaleY(17);
    GamePagePlatformText.Caption := CustomMessage('SelectGamePlatformLabel');
    GamePagePlatformText.Parent := GamePage.Surface;

    GamePagePlatformCheckListBox := TNewCheckListBox.Create(GamePage);
    GamePagePlatformCheckListBox.Enabled := GamePageEnableCheckBox.Checked;
    GamePagePlatformCheckListBox.Top := GamePagePlatformText.Top + GamePagePlatformText.Height + ScaleY(8);
    GamePagePlatformCheckListBox.Width := GamePage.SurfaceWidth;
    GamePagePlatformCheckListBox.Height := ScaleY(50);
    GamePagePlatformCheckListBox.BorderStyle := bsNone;
    GamePagePlatformCheckListBox.ParentColor := True;
    GamePagePlatformCheckListBox.MinItemHeight := WizardForm.TasksList.MinItemHeight;
    GamePagePlatformCheckListBox.ShowLines := False;
    GamePagePlatformCheckListBox.WantTabs := True;
    GamePagePlatformCheckListBox.Parent := GamePage.Surface;
    GamePagePlatformCheckListBox.AddRadioButton(CustomMessage('SelectGamePlatform32Label'), '', 0, False, True, nil);
    GamePagePlatformCheckListBox.AddRadioButton(CustomMessage('SelectGamePlatform64Label'), '', 0, False, True, nil);
    GamePagePlatformCheckListBox.Checked[0] := GetPreviousData('Game32', '0') = '1';
    GamePagePlatformCheckListBox.Checked[1] := GetPreviousData('Game64', '0') = '1';

    GamePageExtraInfoText := TNewStaticText.Create(GamePage);
    GamePageExtraInfoText.AutoSize := False;
    GamePageExtraInfoText.Top := GamePagePlatformCheckListBox.Top + GamePagePlatformCheckListBox.Height + ScaleY(16);
    GamePageExtraInfoText.Width := GamePage.SurfaceWidth;
    GamePageExtraInfoText.Height := ScaleY(51);
    GamePageExtraInfoText.WordWrap := True;
    GamePageExtraInfoText.Caption := CustomMessage('SelectGameExtraInfoLabel');
    GamePageExtraInfoText.Parent := GamePage.Surface;

    // Hack our next button on click event to work around the default validation behavior of the TInputDirWizardPage
    WizardFormNextButtonOnClickEventOriginal := WizardForm.NextButton.OnClick;
    WizardForm.NextButton.OnClick := @WizardFormNextButtonOnClickEvent;
end;

function NextButtonClick(CurPageId: Integer): Boolean;
begin
    Result := True;
    if CurPageId = GamePage.ID then
    begin
        if GamePageEnableCheckBox.Checked = True then
        begin
            if (GamePagePlatformCheckListBox.Checked[0] = False) and (GamePagePlatformCheckListBox.Checked[1] = False) then
            begin
                MsgBox(CustomMessage('SelectGamePlatformValidationError'), mbError, MB_OK);
                Result := False;
            end;
        end;
    end;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
begin
    Result := MemoDirInfo + NewLine + NewLine + CustomMessage('ReadyMemoInstallForGameEnable') + NewLine + Space;
    if GamePageEnableCheckBox.Checked = True then
    begin
        Result := Result + CustomMessage('Yes') + NewLine + NewLine + CustomMessage('ReadyMemoInstallForGameDirDesc') + NewLine + Space + GamePage.Values[0];
        Result := Result + NewLine + NewLine + CustomMessage('ReadyMemoInstallForGamePlatformDesc') + NewLine + Space;
        if GamePagePlatformCheckListBox.Checked[0] = True then
        begin
            Result := Result + CustomMessage('SelectGamePlatform32Label');
        end else begin
            Result := Result + CustomMessage('SelectGamePlatform64Label');
        end;
    end else begin
        Result := Result + CustomMessage('No');
    end;
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
    SetPreviousData(PreviousDataKey, 'GameEnable', IntToStr(Ord(GamePageEnableCheckBox.Checked)));
    SetPreviousData(PreviousDataKey, 'GameDir', GamePage.Values[0]);
    SetPreviousData(PreviousDataKey, 'Game32', IntToStr(Ord(GamePagePlatformCheckListBox.Checked[0])));
    SetPreviousData(PreviousDataKey, 'Game64', IntToStr(Ord(GamePagePlatformCheckListBox.Checked[1])));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
    mres : integer;
begin
    case CurUninstallStep of
        usPostUninstall:
            begin
                mres := MsgBox(CustomMessage('RemoveAppDataFolderMsgBox'), mbConfirmation, MB_YESNO or MB_DEFBUTTON2)
                if mres = IDYES then
                    DelTree(ExpandConstant('{userappdata}\LightFX Extender'), True, True, True);
            end;
    end;
end;

function GameDir(Dummy: String): String;
begin
    Result := GamePage.Values[0]
end;

function Game32Check: Boolean;
begin
    Result := GamePagePlatformCheckListBox.Checked[0]
end;

function Game64Check: Boolean;
begin
    Result := GamePagePlatformCheckListBox.Checked[1]
end;
